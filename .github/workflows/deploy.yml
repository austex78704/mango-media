name: Deploy Mango Media Website

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: infrastructure/package-lock.json
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Clean up any existing failed stacks
      run: |
        # Check if MangoMediaStack exists and handle DELETE_FAILED state
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name MangoMediaStack --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
        
        if [[ "$STACK_STATUS" == "DELETE_FAILED" ]]; then
          echo "Stack is in DELETE_FAILED state. Attempting to delete resources manually..."
          # Get all resources in the stack
          aws cloudformation list-stack-resources --stack-name MangoMediaStack --query 'StackResourceSummaries[?ResourceStatus!=`DELETE_COMPLETE`].[LogicalResourceId,PhysicalResourceId,ResourceType]' --output table || true
          
          # Delete stack with retain resources to bypass deletion issues
          aws cloudformation delete-stack --stack-name MangoMediaStack --retain-resources WebsiteBucket || true
          
          # Wait a bit for the deletion attempt
          sleep 30
          
          # Force delete the stack
          aws cloudformation delete-stack --stack-name MangoMediaStack || true
        elif [[ "$STACK_STATUS" != "DOES_NOT_EXIST" ]]; then
          echo "Stack exists in state: $STACK_STATUS. Deleting..."
          aws cloudformation delete-stack --stack-name MangoMediaStack || true
        fi
        
        # Clean up InfrastructureStack if it exists
        aws cloudformation delete-stack --stack-name InfrastructureStack || true
        
        echo "Waiting for stack cleanup..."
        aws cloudformation wait stack-delete-complete --stack-name MangoMediaStack || true
        aws cloudformation wait stack-delete-complete --stack-name InfrastructureStack || true
      
    - name: Deploy CloudFormation infrastructure
      run: |
        aws cloudformation deploy \
          --template-file cloudformation-template.json \
          --stack-name MangoMediaStack \
          --parameter-overrides DomainName=mangomedia.com \
          --capabilities CAPABILITY_IAM \
          --no-fail-on-empty-changeset
      
    - name: Get stack outputs
      id: stack-outputs
      run: |
        BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name MangoMediaStack --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' --output text)
        DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name MangoMediaStack --query 'Stacks[0].Outputs[?OutputKey==`DistributionId`].OutputValue' --output text)
        WEBSITE_URL=$(aws cloudformation describe-stacks --stack-name MangoMediaStack --query 'Stacks[0].Outputs[?OutputKey==`WebsiteURL`].OutputValue' --output text)
        NAMESERVERS=$(aws cloudformation describe-stacks --stack-name MangoMediaStack --query 'Stacks[0].Outputs[?OutputKey==`NameServers`].OutputValue' --output text)
        echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT
        echo "distribution-id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
        echo "website-url=$WEBSITE_URL" >> $GITHUB_OUTPUT
        echo "### Stack Outputs ###"
        echo "Bucket Name: $BUCKET_NAME"
        echo "Distribution ID: $DISTRIBUTION_ID"
        echo "Website URL: $WEBSITE_URL"
        echo "### IMPORTANT: Update GoDaddy Nameservers ###"
        echo "NameServers: $NAMESERVERS"
        
    - name: Deploy website files to S3
      run: |
        aws s3 sync . s3://${{ steps.stack-outputs.outputs.bucket-name }} \
          --delete \
          --exclude "infrastructure/*" \
          --exclude ".git/*" \
          --exclude ".github/*" \
          --exclude "node_modules/*" \
          --exclude "*.md" \
          --exclude ".*" \
          --exclude "cdk-outputs.json" \
          --exclude "cdk-out/*" \
          --exclude "simple-template.json" \
          --exclude "cloudformation-template.json"
          
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ steps.stack-outputs.outputs.distribution-id }} \
          --paths "/*"
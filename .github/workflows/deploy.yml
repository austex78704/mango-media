name: Deploy Mango Media Website

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: infrastructure/package-lock.json
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Install CDK dependencies
      working-directory: infrastructure
      run: npm ci
      
    - name: Build CDK project
      working-directory: infrastructure
      run: npm run build
      
    - name: Clean up CDK output directories
      run: rm -rf cdk-out infrastructure/cdk.out
      
    - name: Force delete CDK bootstrap stack if it exists
      run: |
        # Try to force delete the CDKToolkit stack regardless of state
        aws cloudformation delete-stack --stack-name CDKToolkit || true
        echo "Waiting for stack deletion..."
        aws cloudformation wait stack-delete-complete --stack-name CDKToolkit || true
        echo "Stack cleanup complete or stack didn't exist"
      
    - name: Create minimal bootstrap resources manually
      run: |
        # Create the S3 bucket that CDK needs for assets
        BUCKET_NAME="cdk-hnb659fds-assets-130790513366-us-east-1"
        aws s3 mb s3://$BUCKET_NAME --region us-east-1 || echo "Bucket already exists or creation failed"
        aws s3api put-bucket-versioning --bucket $BUCKET_NAME --versioning-configuration Status=Enabled || true
        aws s3api put-bucket-encryption --bucket $BUCKET_NAME --server-side-encryption-configuration Rules=[{ApplyServerSideEncryptionByDefault={SSEAlgorithm=AES256}}] || true
      
    - name: Synthesize CDK templates only (no bootstrap)
      run: npx cdk synth --app "infrastructure/bin/infrastructure.js" --output cdk-out
      
    - name: Upload CDK assets to S3
      run: |
        # Upload the Lambda function asset that CDK generated
        BUCKET_NAME="cdk-hnb659fds-assets-130790513366-us-east-1"
        if [ -d "cdk-out/asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6" ]; then
          cd cdk-out/asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6
          zip -r ../faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip .
          cd ../..
          aws s3 cp cdk-out/faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip s3://$BUCKET_NAME/faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip
        fi
      
    - name: Deploy infrastructure with CloudFormation
      run: |
        aws cloudformation deploy \
          --template-file cdk-out/InfrastructureStack.template.json \
          --stack-name InfrastructureStack \
          --capabilities CAPABILITY_IAM \
          --no-fail-on-empty-changeset
      
    - name: Get stack outputs
      id: stack-outputs
      run: |
        BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name InfrastructureStack --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' --output text)
        DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name InfrastructureStack --query 'Stacks[0].Outputs[?OutputKey==`DistributionId`].OutputValue' --output text)
        echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT
        echo "distribution-id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
        
    - name: Deploy website files to S3
      run: |
        aws s3 sync . s3://${{ steps.stack-outputs.outputs.bucket-name }} \
          --delete \
          --exclude "infrastructure/*" \
          --exclude ".git/*" \
          --exclude ".github/*" \
          --exclude "node_modules/*" \
          --exclude "*.md" \
          --exclude ".*" \
          --exclude "cdk-outputs.json"
          
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ steps.stack-outputs.outputs.distribution-id }} \
          --paths "/*"